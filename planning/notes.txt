___________________________________________________________________________________________
Levi: June 9th 2012 04:10 GMT+0
>>>Start of Report
After further research into CouchDB in general, it seems that we won't have to worry much
about the costs of map reducing, since it seems to do a fair amount of indexing and caching
and hooks to existing data so query times are significantly reduced. Yay!

So, changes I made in the graph, Further research seems to pose that trying to do a
revision system in a possibly fragmented environment is just plain dangerous and not
dependable. So.. for simplicity, I'm going to go for verbatim copies of the text with a
timestamp. We're talking less than 1K to 4K at most records here. Nothing significant
unless you got someone updating a freaking record every 5 minutes for months.... Then
there should probably be some clean ups.. But creating a maintainance function for that
should not be hard AT ALL.

Next addition, So I find out that Couch has EXCELLENT support of binary attachments.
Things are streamed, so there's no issue of using CouchDB as a place to store our
attachments. It can handle DVD to blueray sized rips with ease. Note: that things can get
somewhat large however due to how stuff is packed. Compacting after large inserts are
recommended.
I don't think we'll need to worry much about security with attachments, since we'll be
using the database's unique ID which is insanely long and randomlike as it is.

We can probably figure out some authentication/security mechanism within nginx, so I
really don't think we need to worry about it.

I have added the Messages System, where it is directly tied to the user account. Quite
simply, other users have no business being able to query other users' messages, also,
when querying for a message, it won't be much of a step to find the data, since it will
all be there and not much filtering has to happen on the dataset available like in a
Relational DataBase Management System. (RDBMS)

I have added the Chat base, it is almost too simple to bother explaining here.

Finally, I have decided not to put relations directly inside of forums, but rather, have
a separate document which describes, hierarchically, how forums are related. This may be
reversed though, depending on how this changes how queries are capable of getting this
information.

I have Added Message support to the user document, with anticipated custom-folders for
supporting custom-labeled mailboxes. Additionally this describes the actual message.
>>>End of Report
___________________________________________________________________________________________
Levi: June 7th 2012 02:22 GMT+0
>>>Start of Report 
So, since we are working with a NoSQL database, and you can't really do joins and so forth, 
lets focus on organizing the data in a hierarchical way. Such that changes that happen in
one place can effect data upstream, but not downstream. For example, a post is added to a
thread; we then set the date for the latest post on that thread to be the same date.

So that you are aware, NoSQL databases, although are efficient at iterating through the
document members, when something isn't by an index, you have to go through everything. Even
with the power of map reduce and internal caching, you still have to go through each
entry.

For this reason, I think we should treat our users, and permissions as their own root
documents, which have their members indexed. Every Document inherently gets a unique id
in CouchDB, refer to http://wiki.apache.org/couchdb/HTTP_Document_API#Special_Fields

I have learned however, that the revision data is only there for when documents require 
conflict resolution (two shards have same base, both fork, they need to detect if merging
is needed). For this reason I put in a data structure that keeps our own revision count and
diffs (prefered to be in unified diff format). However I forsee it breaking in a multi-
shard setup. Logging verbatim the old copy isn't really what I want to do, since for large
texts this can be bothersome (Yes, we are only talking about less than 3K). Diffs only work
when you have a dependable reference. If this reference is merged by the database.. How do
we handle this?
_I seek your comments on the above._

Overall, I want this to be a fast structure, and I know that if we follow a standard
Relational Database Management System it will not perform optimally. We are safe doing
Users and Permissions in their own root documents, since they will not be growing at a
potentially rapid rate.

However Posts, threads, and so forth need to have a parental structure so we are not
map reducing information that we know we will be skipping every time for a given thread.

I was thinking about sub forums being a descendant of forums(which may be a descendant
of another) but then I considered: That would be a lot harder to do searching through..
Also, since forums in general are not going to be growing at a rapid rate, since only
administrators should be able to add new forums at will. (Forums as in categories,
like on http://ubuntuforums.org/ you have "Main Support Categories", which have subforums
like "General Help", "Apple Users",....)

Do you think we should have a separate structure that defines the forum heirarchy, and
then we just query for the forum ids from that, rather than in the currently planned
forum document?

There's some attributes which I know are missing that are standard for normal forums,
but I'm going to let it rest for a while due to a large assignment.

The mind map is also very incomplete. It does not include the real time chat logging,
nor room sessions, etc.
>>>End of Report  
